package com.flawden.TaskManagerAPI.service;

import com.flawden.TaskManagerAPI.dto.Comment;
import com.flawden.TaskManagerAPI.exception.CommentNotFoundException;

import java.util.List;

/**
 * Сервис для работы с комментариями.
 * <p>
 * Этот сервис предоставляет методы для управления комментариями, включая получение всех комментариев,
 * создание, обновление, удаление и поиск комментариев по различным параметрам.
 * </p>
 */
public interface CommentService {

    /**
     * Получение всех комментариев.
     * <p>
     * Этот метод возвращает список всех комментариев в системе.
     * </p>
     *
     * @return список всех комментариев.
     */
    List<Comment> getAllComments();

    /**
     * Получение комментариев с пагинацией.
     * <p>
     * Этот метод возвращает список комментариев с возможностью пагинации.
     * </p>
     *
     * @param page  номер страницы.
     * @param limit количество комментариев на странице.
     * @return список комментариев на указанной странице.
     */
    List<Comment> getCommentsWithPagination(Integer page, Integer limit);

    /**
     * Получение комментария по его идентификатору.
     * <p>
     * Этот метод возвращает комментарий по заданному идентификатору.
     * </p>
     *
     * @param id идентификатор комментария.
     * @return комментарий с указанным идентификатором.
     * @throws CommentNotFoundException если комментарий с таким идентификатором не найден.
     */
    Comment getCommentById(Long id);

    /**
     * Добавление нового комментария.
     * <p>
     * Этот метод позволяет добавить новый комментарий в систему.
     * </p>
     *
     * @param comment объект комментария, который нужно добавить.
     * @return добавленный комментарий.
     */
    Comment addComment(Comment comment);

    /**
     * Обновление комментария.
     * <p>
     * Этот метод позволяет обновить существующий комментарий. Обновление возможно только для
     * комментариев, созданных автором с указанным идентификатором.
     * </p>
     *
     * @param comment  объект комментария с новыми данными.
     * @param authorId идентификатор автора комментария.
     * @throws CommentNotFoundException если комментарий с таким автором не найден.
     */
    void updateComment(Comment comment, Long authorId);

    /**
     * Удаление комментария.
     * <p>
     * Этот метод позволяет удалить комментарий по его идентификатору.
     * </p>
     *
     * @param id идентификатор комментария, который нужно удалить.
     * @throws CommentNotFoundException если комментарий с таким идентификатором не найден.
     */
    void deleteComment(Long id);

    /**
     * Получение комментария по идентификатору задачи.
     * <p>
     * Этот метод возвращает комментарий, привязанный к задаче с заданным идентификатором.
     * </p>
     *
     * @param id идентификатор задачи.
     * @return комментарий, связанный с указанной задачей.
     * @throws CommentNotFoundException если комментарий для указанной задачи не найден.
     */
    Comment getCommentByTaskId(Long id);

    /**
     * Получение комментария по идентификатору пользователя.
     * <p>
     * Этот метод возвращает комментарий, созданный пользователем с заданным идентификатором.
     * </p>
     *
     * @param id идентификатор пользователя.
     * @return комментарий, созданный указанным пользователем.
     * @throws CommentNotFoundException если комментарий для указанного пользователя не найден.
     */
    Comment getCommentByUserId(Long id);

}
