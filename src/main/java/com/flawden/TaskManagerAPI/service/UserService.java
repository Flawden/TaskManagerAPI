package com.flawden.TaskManagerAPI.service;

import com.flawden.TaskManagerAPI.dto.user.UpdateUser;
import com.flawden.TaskManagerAPI.dto.user.User;
import com.flawden.TaskManagerAPI.exception.UserNotFoundException;

import java.util.List;

/**
 * Сервис для работы с пользователями.
 * <p>
 * Этот сервис предоставляет методы для управления пользователями, включая получение всех пользователей, создание,
 * обновление, удаление и поиск пользователей по различным параметрам.
 * </p>
 */
public interface UserService {

    /**
     * Получение всех пользователей.
     * <p>
     * Этот метод возвращает список всех пользователей в системе.
     * </p>
     *
     * @return список всех пользователей.
     */
    List<User> getAllUsers();

    /**
     * Получение пользователей с пагинацией.
     * <p>
     * Этот метод возвращает список пользователей с возможностью пагинации.
     * </p>
     *
     * @param page номер страницы.
     * @param size количество пользователей на странице.
     * @return список пользователей на указанной странице.
     */
    List<User> getUsersWithPagination(Integer page, Integer size);

    /**
     * Получение пользователя по его идентификатору.
     * <p>
     * Этот метод возвращает пользователя по заданному идентификатору.
     * </p>
     *
     * @param id идентификатор пользователя.
     * @return пользователь с указанным идентификатором.
     * @throws UserNotFoundException если пользователь с таким идентификатором не найден.
     */
    User getUserById(Long id);

    /**
     * Добавление нового пользователя.
     * <p>
     * Этот метод позволяет добавить нового пользователя в систему.
     * </p>
     *
     * @param user объект пользователя, который нужно добавить.
     * @return добавленный пользователь.
     */
    User addUser(User user);

    /**
     * Обновление пользователя.
     * <p>
     * Этот метод позволяет обновить существующего пользователя. Обновление возможно только для
     * пользователя с указанным идентификатором.
     * </p>
     *
     * @param user   объект пользователя с новыми данными.
     * @param userId идентификатор пользователя, которого нужно обновить.
     * @throws UserNotFoundException если пользователь с таким идентификатором не найден.
     */
    void updateUser(UpdateUser user, Long userId);

    /**
     * Удаление пользователя.
     * <p>
     * Этот метод позволяет удалить пользователя по его идентификатору.
     * </p>
     *
     * @param id идентификатор пользователя, которого нужно удалить.
     * @throws UserNotFoundException если пользователь с таким идентификатором не найден.
     */
    void deleteUser(Long id);

    /**
     * Получение пользователя по его имени пользователя.
     * <p>
     * Этот метод возвращает пользователя по его уникальному имени пользователя (например, email).
     * </p>
     *
     * @param username имя пользователя.
     * @return пользователь с указанным именем.
     * @throws UserNotFoundException если пользователь с таким именем не найден.
     */
    User getUserByUsername(String username);

}
